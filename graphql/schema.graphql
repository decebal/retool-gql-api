"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    "List multiple orders not necessarily by user."
    orders(
        order_number: String @where(operator: "like")
        user_id: String @where(operator: "like")
    ): [Order!]! @paginate(defaultCount: 10)

    "List all products."
    products: [Product!]! @paginate(defaultCount: 10)
}


type Mutation {
    createOrder(products: [ID!]!, quantities: [Int!]!): Order
    @field(resolver: "App\\GraphQL\\Mutations\\OrderMutations@create")
    @guard(with: ["api"])

    updateProduct(
        productId: ID!
        orderId: ID!
        deliveryTime: String!
        deliveryStatus: String!
    ): Product
    @field(resolver: "App\\GraphQL\\Mutations\\ProductMutations@update")
    @guard(with: ["api"])

    login(email: String!, password: String!): AuthPayload @field(resolver: "App\\GraphQL\\Mutations\\AuthMutations@login")
    refresh(refreshToken: String!): AuthPayload @field(resolver: "App\\GraphQL\\Mutations\\AuthMutations@refresh")
}

type Product @model {
    id: ID!
    name: String!
    order: Order @belongsTo
}

type Order @model {
    id: ID!
    order_number: String!
    user: User @belongsTo
    products: [ProductPivot!]! @hasMany
}

type ProductPivot {
    id: ID!
    name: String!
    pivot: OrderProductPivot
}

type OrderProductPivot {
    quantity: Int
    delivery_time: String
    delivery_status: String
}

"Account of a person who utilizes this application."
type User @model {
    id: ID!
    name: String!
    email: String!
    orders: [Order!]! @hasMany

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    "User role, one of admin | supplier."
    role: String!
}

type AuthPayload {
    access_token: String!
    refresh_token: String!
    token_type: String!
    expires_in: Int!
}
