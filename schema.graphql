# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AuthPayload {
    access_token: String!
    expires_in: Int!
    refresh_token: String!
    token_type: String!
}

type Mutation {
    createOrder(orderNumber: String!, products: [ProductInput!]!, userId: ID!): Order
    createProduct(deliveryStatus: String!, deliveryTime: DateTime!, name: String!, orderId: ID!): Product
    deleteProduct(id: ID!): Product
    login(email: String!, password: String!): AuthPayload
    refresh(refreshToken: String!): AuthPayload
    updateProduct(deliveryStatus: String, deliveryTime: String, id: ID!): Product
}

type Order {
    id: ID!
    order_number: String!
    products: [Product!]!
    user: User
}

"A paginated list of Order items."
type OrderPaginator {
    "A list of Order items."
    data: [Order!]!
    "Pagination information about the list of items."
    paginatorInfo: PaginatorInfo!
}

"Information about pagination using a fully featured paginator."
type PaginatorInfo {
    "Number of items in the current page."
    count: Int!
    "Index of the current page."
    currentPage: Int!
    "Index of the first item in the current page."
    firstItem: Int
    "Are there more pages after this one?"
    hasMorePages: Boolean!
    "Index of the last item in the current page."
    lastItem: Int
    "Index of the last available page."
    lastPage: Int!
    "Number of items per page."
    perPage: Int!
    "Number of total available items."
    total: Int!
}

type Product {
    delivery_status: String!
    delivery_time: DateTime!
    id: ID!
    name: String!
    order: Order
}

"A paginated list of Product items."
type ProductPaginator {
    "A list of Product items."
    data: [Product!]!
    "Pagination information about the list of items."
    paginatorInfo: PaginatorInfo!
}

"Indicates what fields are available at the top level of a query operation."
type Query {
    "List multiple orders not necessarily by user."
    orders(
        "Limits number of fetched items."
        first: Int! = 10,
        order_number: String,
        "The offset from which items are returned."
        page: Int,
        user_id: String
    ): OrderPaginator!
    "List all products."
    products(
        "Limits number of fetched items."
        first: Int! = 10,
        "The offset from which items are returned."
        page: Int
    ): ProductPaginator!
    "Find a single user by an identifying attribute."
    user(
        "Search by email address."
        email: String,
        "Search by primary key."
        id: ID
    ): User
    "List multiple users."
    users(
        "Limits number of fetched items."
        first: Int! = 10,
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String,
        "The offset from which items are returned."
        page: Int
    ): UserPaginator!
}

"Account of a person who utilizes this application."
type User {
    "When the account was created."
    created_at: DateTime!
    email: String!
    "When the email was verified."
    email_verified_at: DateTime
    id: ID!
    name: String!
    orders: [Order!]!
    "User role, one of admin | supplier."
    role: String!
    "When the account was last updated."
    updated_at: DateTime!
}

"A paginated list of User items."
type UserPaginator {
    "A list of User items."
    data: [User!]!
    "Pagination information about the list of items."
    paginatorInfo: PaginatorInfo!
}

"Aggregate functions when ordering by a relation without specifying a column."
enum OrderByRelationAggregateFunction {
    "Amount of items."
    COUNT
}

"Aggregate functions when ordering by a relation that may specify a column."
enum OrderByRelationWithColumnAggregateFunction {
    "Average."
    AVG
    "Amount of items."
    COUNT
    "Maximum."
    MAX
    "Minimum."
    MIN
    "Sum."
    SUM
}

"Directions for ordering a list of records."
enum SortOrder {
    "Sort records in ascending order."
    ASC
    "Sort records in descending order."
    DESC
}

"Specify if you want to include or exclude trashed results from a query."
enum Trashed {
    "Only return trashed results."
    ONLY
    "Return both trashed and non-trashed results."
    WITH
    "Only return non-trashed results."
    WITHOUT
}

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime

"Allows ordering a list of records."
input OrderByClause {
    "The column that is used for ordering."
    column: String!
    "The direction that is used for ordering."
    order: SortOrder!
}

input ProductInput {
    delivery_status: String!
    delivery_time: String!
    name: String!
}
